import re
from datetime import datetime
import uuid
import time
from utils.hashes import hash512

import requests


class MakejobTester:
    """
    Test suite for /makejob OT_REST endpoint.
    Testing for different job statuses:
    - job not created
    - status is 'new'
    - status is 'running'
    - status is 'finished'
    - status is 'failed'
    - status is 'external'
    - status is 'canceled'
    """

    def __init__(self, db, config):
        self.db = db
        self.config = config

        self._current_otl = None
        self.cookies = None

        self.request_data = {
            'sid': None,
            'original_otl': None,
            'tws': 0,
            'twf': 0,
            'cache_ttl': 60,
            'field_extraction': False,
            'username': 'admin',
            'preview': False
        }

    def set_query(self, otl_query):
        self._current_otl = otl_query

    def update_job_status(self, status, job_id):
        query_str = f"""UPDATE OTLQueries SET status='{status}' WHERE id={job_id};"""
        self.db.execute_query(query_str, params=(status, job_id), with_commit=True, with_fetch=False)

    @property
    def original_otl(self):
        original_otl = re.sub(r"\|\s*ot\s[^|]*\|", "", self._current_otl)
        original_otl = re.sub(r"\|\s*simple[^\"]*", "", original_otl)
        original_otl = original_otl.replace("oteval", "eval")
        original_otl = original_otl.strip()
        return original_otl

    @property
    def superlong_otl(self):
        return '| makeresults count=1 | eval value="1750022351,1750022350,1750022362,1750025760,1750022349,1750025619,' \
               '1750022348,1750015756,1750026650,1750026651,1750022357,1750022353,1750022354,1750022355,1750022360,' \
               '1751037702,1750025759,1750022358,1750022361,1750022352,1750022356,1750026667,1750022333,1750022332,' \
               '1750022336,1750022340,1750022344,1750022335,1750022331,1750022341,1750022343,1750022342,1750022337,' \
               '1750022345,1750022347,1750022346,1750022338,1750022334,1750022364,1750022339,1750032105,1750014379,' \
               '1750033965,1750017548,1750017543,1750017552,1750017557,1750017554,1750017546,1750017544,1750017559,' \
               '1750017561,1750017553,1750017560,1750017551,1750017565,1750017564,1750017545,1750028121,1750014377,' \
               '1750034804,1750026300,1750017455,1750026279,1750017453,1750026239,1750017484,1750028123,1750014378,' \
               '1750026259,1750014380,1750017452,1750017485,1750017454,1750017486,1751037044,1750030121,1750017515,' \
               '1750017521,1750017431,1750017516,1750017430,1750017522,1750017435,1750017432,1750017520,1750017429,' \
               '1750017428,1750017523,1750017511,1750017509,1750030123,1750026941,1750030122,1750030120,1750028140,' \
               '1750032122,1750017510,1750014423,1750028120,1750014424,1750017457,1751037862,1750020249,1750006222,' \
               '1750006231,1750006225,1750006223,1750006224,1750006456,1750005959,1750006221,1750006219,1750006227,' \
               '1750020049,1750006233,1750015176,1750006458,1750015177,1750005962,1750005964,1750006226,1750006232,' \
               '1750006220,1750006230,1750020048,1750007082,1750006457,1750006229,1750034182,1750031145,1750026533,' \
               '1750020248,1750020037,1750016101,1750020038,1750020036,1750006228,1750020039,1750007083,1750014952,' \
               '1750005958,1750005953,1750005954,1750006174,1750005957,1750005955,1750005960,1750005956,1750014598,' \
               '1750014047,1750015779,1750005949,1750025155,1750005852,1750006236,1750006161,1750015780,1750006238,' \
               '1750015175,1750015174,1750005948,1750006235,1750007079,1750006237,1750034602,1750020150,1750020250,' \
               '1750020251,1750015183,1750007085,1750007084,1750015182,1750006234,1750015782,1750005951,1750005950,' \
               '1750014608,1750014871,1750021288,1750026400,1750021289,1750002284,1750001316,1750025276,1750027162,' \
               '1750025275,1750027821,1750031142,1750001344,1750012986,1750028243,1750015840,1750001338,1750001314,' \
               '1750001884,1750001914,1750000957,1750003142,1750022253,1751035445,1751035462,1750023333,1750022254,' \
               '1750022302,1750002321,1750001348,1750021529,1751035444,1751037622,1750022028,1750022027,1750022087,' \
               '1750022033,1750022031,1750022022,1750022024,1750022032,1750022021,1750022014,1750022023,1750022029,' \
               '1750022013,1750026159,1750026139,1750022038,1750022037,1750022086,1750022079,1750022085,1750022077,' \
               '1750022076,1750022066,1750022075,1750027440,1750022084,1750022074,1750026339,1750026319,1750027420,' \
               '1750022067,1750026340,1750022065,1750026104,1750022049,1750022019,1750022092,1750030180,1750022072,' \
               '1750022064,1750022051,1750022062,1751037082,1750022093,1750022050,1750033963,1750022016,1750000296,' \
               '1750000346,1750000347,1750000336,1750018593,1750000337,1750018260,1750000219,1750023793,1750018967,' \
               '1750018964,1750000345,1750018592,1750018968,1750018594,1750000221,1750000220,1750022010,1750000316,' \
               '1750019389,1750000317,1750029141,1750029140,1750000229,1750019366,1750000227,1750000301,1750018957,' \
               '1750018958,1750018959,1750019378,1750000240,1750000241,1750000332,1750007484,1750000233,1750023794,' \
               '1750019397,1750019396,1750000164,1750009065,1750000266,1750000264,1750000263,1751038292,1750022011,' \
               '1750018960,1750018963,1750000168,1750000331,1750033703,1750000174,1750000289,1750018977,1750023777,' \
               '1750019398,1750023776,1750018991,1750018976,1750018997,1750018999,1750018992,1750000175,1750018993,' \
               '1750018990,1750018978,1750023775,1750018989,1750018982,1750000290,1750018972,1750018987,1750018998,' \
               '1750018988,1750019189,1750023774,1750018986,1750023773,1750018975,1750018973,1750033702,1751035982,' \
               '1750031822,1751035204,1751035222,1751035223,1750019399,1750000176,1750019370,1750000288,1750018971,' \
               '1750023772,1750000328,1750000179,1750000181,1750000287,1750000180,1750000329,1750018962,1750030920,' \
               '1750000393,1750000394,1750000389,1750007483,1751035983,1750018996,1750000183,1750000344,1750018970,' \
               '1750019364,1750019371,1750000327,1750000324,1750000325,1750019392,1750000223,1750000228,1750000304,' \
               '1750019365,1750000319,1750000326,1750019363,1750019382,1750019383,1750019388,1750000323,1750019385,' \
               '1750000318,1750000335,1750000311,1751037903,1750000334,1750000333,1750000312,1750019386,1750019391,' \
               '1750019387,1750000313,1750019390,1750023293,1750000222,1750023779,1750018262,1751038204,1750018254,' \
               '1750030960,1750019372,1750023792,1750019402,1750023796,1750019377,1750019400,1750019407,1750000315,' \
               '1750019406,1750019369,1750019403,1750018961,1750019373,1750019401,1750019375,1750019405,1750019376,' \
               '1750000314,1750030940,1750000310,1750012831,1750012840,1750018059,1750018058,1750019695,1750018057,' \
               '1750018044,1750018050,1750018051,1750018049,1750018053,1750018048,1750018052,1750018045,1750018046,' \
               '1750018056,1750019697,1750034786,1750022310,1750024216,1750026921,1750024215,1750032988,1750022291,' \
               '1750022293,1750019694,1750012838,1750017828,1750008652,1750008654,1750008653,1750008651,1750008650,' \
               '1750005923,1750008700,1750015901,1750008699,1750008695,1750005917,1750005922,1750008876,1750008701,' \
               '1750005921,1750005918,1750008696,1750005916,1750008691,1750005920,1750005919,1750011608,1750008692,' \
               '1750005925,1750005924,1750008697,1750008694,1750011610,1750008693,1750005911,1750008659,1750011607,' \
               '1750005915,1750011806,1750011606,1750011609,1750008660,1750017844,1750017827,1750005912,1750008655,' \
               '1750008877,1750005913,1750005914,1750015574,1750001211,1750015575,1750001208,1750001210,1750015573,' \
               '1750001212,1750014721,1750013706,1750001209,1750019626,1750001206,1750018231,1750001189,1750001191,' \
               '1750001190,1750001187,1750001186,1750001188,1750001185,1750001199,1750001200,1750001201,1750001197,' \
               '1750001202,1751038303,1750001177,1750001179,1750001178,1750001180,1750001181,1750001182,1750001183,' \
               '1750001176,1750001175,1750026481,1750001174,1750019968,1750006379,1750006378,1750022370,1750019971,' \
               '1750006376,1750006377,1750019970,1750001939,1750031102,1750025719,1750015939,1750015938,1750014613,' \
               '1750015958,1750005350,1750005349,1750035022,1750006156,1750025639,1750005354,1750006160,1750005356,' \
               '1750017605,1750017604,1750006158,1750024485,1750006159,1750024484,1750017650,1750024483,1750005348,' \
               '1750031342,1750024486,1750017626,1750031402,1750024482,1750017628,1750033143,1750033042,1750005347,' \
               '1750005355,1750006155,1750006152,1750029282,1750029281,1750024217,1750005351,1750005353,1750005352,' \
               '1750022748,1750030220,1750029481,1750029480,1750031502,1750024179,1751038825,1751038243,1751038242,' \
               '1751037484,1751037322,1751037483,1750022512,1750022509,1750022508,1750022510,1751035623,1751035622,' \
               '1751035602,1750022514,1750024151,1750024145,1750022515,1750022532,1751035564,1751035562,1750022513,' \
               '1750027223,1750028380,1750022518,1750022520,1751035563,1750024154,1750022511,1750027224,1750028281,' \
               '1750024150,1751035403,1750030620,1750028261,1750028260,1750024152,1750024178,1751035624,1750024156,' \
               '1750022519,1750022517,1750033582,1750022516,1750024155,1751038545,1750028081,1750028080,1750028280,' \
               '1750013009,1750005014,1750004991,1750005006,1750015822,1750004964,1750004957,1750005013,1750013006,' \
               '1750031823,1750031863,1750031843,1750031882,1750031862,1750031842,1750005099,1750014311,1750014315,' \
               '1750014317,1750014314,1750014312,1750014313,1750014316,1750005147,1750005149,1750005142,1750005145,' \
               '1750005143,1750005146,1750005139,1750005141,1750005148,1750005140,1750004949,1750005840,1750005094,' \
               '1750005838,1750005796,1750005841,1750005839,1750005794,1750005026,1750005074,1750005793,1750005029,' \
               '1750005073,1750005096,1750005093,1750005097,1750005795,1750005797,1750005078,1750005027,1750005792,' \
               '1750005028,1750005095,1750005030,1750005799,1750005098,1750005800,1750005798,1750024072,1750005144,' \
               '1750005007,1750005138,1750005137,1750005136,1750005031,1750013007,1751037034,1751037035,1750031824,' \
               '1750027261,1750026761,1750027263,1750005837,1750005008,1750004971,1750026740,1750012110,1750013008,' \
               '1751036402,1750020580,1750020579,1750020463,1750020582,1750020465,1751038625,1750020581,1750020466,' \
               '1750020464,1751038645,1750020462,1751035724,1751035725,1751035723,1750032782,1750034282,1751038066,' \
               '1751038065,1750032764,1751038605,1751038648,1750033704,1750031722,1750032763,1750028441,1750028440,' \
               '1750022603,1750020435,1751038647,1751036722,1750030144,1750029262,1750029261,1750029260,1751037062,' \
               '1750033004,1750033005,1750007466,1750018291,1750003834,1750003835,1750003829,1750003845,1750003869,' \
               '1750014153,1750003874,1750003859,1750003866,1750003844,1750022272,1750003868,1750003850,1750003864,' \
               '1750003847,1750003832,1750003849,1750003831,1750003848,1750003861,1750003860,1750003843,1750003862,' \
               '1750003833,1750003872,1750025900,1750003838,1750003870,1750003865,1750003842,1750003863,1750003846,' \
               '1750003871,1750003830,1750003867,1750014140,1750014141,1750029540,1750022273,1750022275,1750003875,' \
               '1750022274,1750022277,1750003858,1750025839,1750025899,1750032262,1750022278,1750014143,1750014142,' \
               '1750003900,1750014154,1750014152,1750019006,1750002011,1750002013,1750002008,1750002015,1750002012,' \
               '1750002016,1750002009,1750001897,1750002010,1750001898,1750002014,1750002017,1750019007,1750018571,' \
               '1750019009,1750019008"'

    def get_jobs_from_db(self, limit=None):
        """
        Return num=limit entries from DB

        :param limit:       number of entries
        :return:
        """
        query_str = f"""SELECT id, creating_date, status FROM OTLQueries 
        WHERE original_otl='{self.original_otl}' ORDER BY creating_date DESC;"""
        if limit:
            query_str = query_str.replace(';', f' LIMIT {limit};')

        if limit == 1:
            result = self.db.execute_query(query_str)
            job_id, creating_date, status = result
            return {'id': job_id, 'date': datetime.strftime(creating_date, '%Y-%m-%d %H:%M:%S'), 'status': status}
        else:
            return self.db.execute_query(query_str, fetchall=True)

    def _cleanup(self):
        del_otl_query = f"""DELETE FROM OTLQueries WHERE original_otl='{self.original_otl}';"""
        del_cache_query = f"""DELETE FROM cachesdl WHERE original_otl='{hash512(self.original_otl)}';"""
        del_GUISIDs_query = """DELETE FROM GUISIDs;"""
        for query in [del_otl_query, del_cache_query, del_GUISIDs_query]:
            self.db.execute_query(query, with_commit=True, with_fetch=False)

    def auth(self):
        data = {'username': 'admin', 'password': '12345678'}
        resp = requests.post(f'http://{self.config["host"]}:{self.config["port"]}/api/auth/login', json=data)
        resp.raise_for_status()
        self.cookies = resp.cookies

    def send_request(self):
        data = self.request_data
        data['original_otl'] = self.original_otl
        data['sid'] = str(uuid.uuid4())
        if not self.cookies:
            self.auth()
        resp = requests.post(f'http://{self.config["host"]}:{self.config["port"]}/api/makejob', 
                             cookies=self.cookies, data=data)
        resp.raise_for_status()
        return resp.json()

    def send_and_validate(self, need_new_job):
        jobs_before = len(self.get_jobs_from_db())
        resp = self.send_request()

        if not resp or resp['status'] != 'success':
            raise ConnectionError('Request failed')
        time.sleep(0.5)  # Wait for queue processing
        jobs_after = len(self.get_jobs_from_db())

        diff = 1 if need_new_job else 0
        if jobs_after - jobs_before != diff:
            raise ValueError(f'Number of jobs before {jobs_before} and after {jobs_after} not valid')

        job_data = self.get_jobs_from_db(limit=1)
        if not job_data:
            raise ValueError('Job does not exist')

        return job_data

    def add_job_with_status(self, status):
        job_id, _ = self.db.add_job(search=[self.original_otl, self.original_otl], subsearches=[], tws=0, twf=0,
                                    cache_ttl=60, username='tester', field_extraction=False, preview=False)
        self.update_job_status(status, job_id)

    def add_job_with_cache(self, need_expired):
        job_id, _ = self.db.add_job(search=[self.original_otl, self.original_otl], subsearches=[], tws=0, twf=0,
                                    cache_ttl=60, username='tester', field_extraction=False, preview=False)
        self.update_job_status('finished', job_id)
        self.db.add_to_cache(original_otl=self.original_otl, tws=0, twf=0,
                             cache_id=100500, expiring_date=1)
        if need_expired:
            time.sleep(1)

    def add_job_without_cache(self):
        job_id, _ = self.db.add_job(search=[self.original_otl, self.original_otl], subsearches=[], tws=0, twf=0,
                                    cache_ttl=60, username='tester', field_extraction=False, preview=False)
        self.update_job_status('finished', job_id)

    def test__no_job(self):
        try:
            job_data = self.send_and_validate(need_new_job=True)
        finally:
            self._cleanup()
        return job_data['status'] == 'new'

    def test__new(self):
        try:
            self.add_job_with_status('new')
            job_data = self.send_and_validate(need_new_job=False)
        finally:
            self._cleanup()
        return job_data['status'] == 'new'

    def test__running(self):
        try:
            self.add_job_with_status('running')
            job_data = self.send_and_validate(need_new_job=False)
        finally:
            self._cleanup()
        return job_data['status'] == 'running'

    def test__finished(self):
        try:
            self.add_job_with_cache(need_expired=False)
            job_data = self.send_and_validate(need_new_job=False)
        finally:
            self._cleanup()
        return job_data['status'] == 'finished'

    def test__finished_expired(self):
        try:
            self.add_job_without_cache()
            job_data = self.send_and_validate(need_new_job=True)
        finally:
            self._cleanup()
        return job_data['status'] == 'new'

    def test__finished_expired_locked(self):
        try:
            self.add_job_with_cache(need_expired=True)
            job_data = self.send_and_validate(need_new_job=False)
        finally:
            self._cleanup()
        return job_data['status'] == 'finished'

    def test__failed(self):
        try:
            self.add_job_with_status('failed')
            job_data = self.send_and_validate(need_new_job=True)
        finally:
            self._cleanup()
        return job_data['status'] == 'new'

    def test__canceled(self):
        try:
            self.add_job_with_status('canceled')
            job_data = self.send_and_validate(need_new_job=True)
        finally:
            self._cleanup()
        return job_data['status'] == 'new'

    def test__external(self):
        try:
            self.add_job_with_status('external')
            job_data = self.send_and_validate(need_new_job=True)
        finally:
            self._cleanup()
        return job_data['status'] == 'new'
